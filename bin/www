#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('final:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var cluster = require('cluster');
/**
 * Get port from environment and store in Express.
 */

// var port = normalizePort(process.env.PORT || '3000');
// app.secPort = normalizePort(process.env.PORT || '3084');
var port = '8000';
// var secPort = "8443";
app.set('port', port);
// app.secPort = secPort;

// var options = {
//     key: fs.readFileSync(__dirname + '/private.key'),
//     cert: fs.readFileSync(__dirname + '/certificate.pem')
// };
/**
 * Create HTTP server.
 */
if (cluster.isMaster) {
    var workers = [];
    for (var i = 0; i < 3; i++) {
        workers.push(cluster.fork());
    }
    // console.log("workers", workers);
    process.on('SIGINT', function () {
        for (var i = 0; i < 5; i++) {
            // console.log("destroying " + worker.process.pid);
            workers[i].destroy();
        }
    });

    cluster.on('exit', function (worker, code, signal) {
        if (worker && workers.indexOf(worker) >= 0)
            workers.splice(workers.indexOf(worker), 1);
        workers.push(cluster.fork());
    });
} else {

    // var secureServer = https.createServer(options, app);
    var server = http.createServer(app);

    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);


    // secureServer.listen(secPort);
    // secureServer.on('error', onSecError);
    // secureServer.on('listening', onSecListening);
}

/**
 * Listen on provided port, on all network interfaces.
 */


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

// function onSecError(error) {
//     if (error.syscall !== 'listen') {
//         throw error;
//     }

//     var bind = typeof secPort === 'string' ?
//         'Pipe ' + secPort :
//         'Port ' + secPort;

//     // handle specific listen errors with friendly messages
//     switch (error.code) {
//         case 'EACCES':
//             console.error(bind + ' requires elevated privileges');
//             process.exit(1);
//             break;
//         case 'EADDRINUSE':
//             console.error(bind + ' is already in use');
//             process.exit(1);
//             break;
//         default:
//             throw error;
//     }
// }

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            // console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            // console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

// function onSecListening() {
//     var addr = secureServer.address();
//     var bind = typeof addr === 'string' ?
//         'pipe ' + addr :
//         'port ' + addr.port;
//     debug('Listening on ' + bind);
// }
